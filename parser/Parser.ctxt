#BlueJ class context
comment0.target=Parser
comment0.text=\n\ The\ Parser\ class\ is\ for\ the\ syntax\ analysis\ phase\ of\ a\ compiler.\ It\ \n\ parses\ through\ the\ tokens\ read\ in\ by\ the\ Scanner\ and\ evaluates\ the\ \n\ statements.\ It\ is\ able\ to\ parse\ numbers,\ terms,\ expressions,\ statements,\ \n\ and\ factors.\n\n\ @author\ Kaden\ Kapadia\n\ @version\ 4/12/2022\n
comment1.params=scanner
comment1.target=Parser(scanner.Scanner)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Parser.\n\ \n\ @param\ scanner\ the\ Scanner\ object\ used\n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
comment2.params=expec
comment2.target=void\ eat(java.lang.String)
comment2.text=\n\ Determines\ whether\ or\ not\ the\ current\ string\ matches\ the\ expected\ string.\n\ \n\ @param\ expec\ the\ expected\ string\n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
comment3.params=
comment3.target=ast.Number\ parseNumber()
comment3.text=\n\ Parses\ a\ number\ by\ turning\ the\ number\ (token)\ into\ an\ integer.\n\ \n\ @return\ the\ number\ as\ an\ integer\n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
comment4.params=
comment4.target=ast.Program\ parseProgram()
comment4.text=\n\ Parses\ through\ a\ group\ of\ procedures\ and\ then\ returns\ the\ \n\ new\ program\ object.\ Uses\ the\ program\ object\ to\ execute\ \n\ to\ store\ and\ run\ code.\ \n\ \n\ @return\ the\ program\ object\ from\ the\ group\ of\ procedures\n\ \ \ \ \ \ \ \ \ \ which\ will\ be\ evaluated\n\ \n\ @throw\ ScanErrorException\ if\ error\ is\ found\n
comment5.params=
comment5.target=ast.Expression\ parseExpression()
comment5.text=\n\ Parses\ through\ an\ expression\ and\ determines\ if\ the\ current\ \n\ token\ is\ a\ +\ or\ -.\n\ \n\ @return\ the\ parsed\ term\ after\ performing\ mathematical\ operations\ on\ it\n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
comment6.params=
comment6.target=ast.Expression\ parseTerm()
comment6.text=\n\ Parses\ through\ a\ term\ and\ determines\ if\ the\ current\ token\ is\ a\ *\ or\ /.\ \n\ \n\ @return\ the\ parsed\ term\ after\ performing\ mathematical\ operations\ on\ it\n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
comment7.params=
comment7.target=ast.Statement\ parseStatement()
comment7.text=\n\ Parses\ through\ a\ statement\ and\ determines\ if\ it\ is\ a\ single\ \n\ writeln\ statement,\ a\ begin/end\ block,\ or\ a\ variable\ statement.\n\ \n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
comment8.params=
comment8.target=ast.Expression\ parseFactor()
comment8.text=\n\ Parses\ through\ a\ factor\ and\ determines\ if\ it\ is\ a\ \n\ negative\ number,\ a\ parenthesis,\ a\ value,\ or\ a\ variable.\ \n\ \n\ @return\ the\ value\ of\ the\ factor\ as\ an\ integer\n\ @throws\ ScanErrorException\ if\ parsing\ through\ an\ unexpected\ token\n
numComments=9
